# 음료수 얼려먹기

# 첫 번째 줄에 얼음 틀의 세로 길이 N과 가로 길이 M이 주어진다.(1 <= N, M <= 1,000)
# 두 번째 줄부터 N+1번째 줄까지 얼음 틀의 형태가 주어진다.
# 이때 구멍이 뚫려있는 부분은 0, 그렇지 않은 부분은 1이다.
# 한번에 만들 수 있는 아이스크림의 개수를 출력한다.

# 입력 예시1 | 출력 예시1
# 4 5       | 3
# 00110
# 00011
# 11111
# 00000

""" 요약
    ※ 연결요소찾기 이다.
    들렸던 곳은 제거하고, 상 하 좌 우가 1(벽)이라면 끝
    더이상 갈 수 있는곳이 없다면 cnt += 1    
"""

def dfs(x, y):
    print("=============================================================================")
    print(graph)
    # 주어진 범위를 벗어나는 경우에는 즉시 종료
    if x <= -1 or x >= N or y <= -1 or y >= M:
        print("범위 벗어남")
        return False
    # 현재 노드를 아직 방문하지 않았다면
    if graph[x][y] == 0:
        # 해당 노드 방문 처리
        print("해당 노드를 방문하지 않아 방문처리 하겠습니다.")
        graph[x][y] = 1
        # 상, 하, 좌, 우의 위치들도 모두 재귀적으로 호출
        print(f"현재위치: ({x}, {y})에서 ({x-1}, {y}): 상 검사")
        dfs(x-1, y) # 상
        print(f"현재위치: ({x}, {y})에서 ({x+1}, {y}): 하 검사")
        dfs(x+1, y) # 하
        print(f"현재위치: ({x}, {y})에서 ({x}, {y-1}): 좌 검사")
        dfs(x, y-1) # 좌
        print(f"현재위치: ({x}, {y})에서 ({x}, {y+1}): 우 검사")
        dfs(x, y+1) # 우
        return True
    # 현재 노드를 방문 했다면
    print("방문한 위치")
    return False

"""
    # 직접 값 받기
    graph = []
    N, M = map(int, input().split())

    # 2차원 리스트의 맵 정보 입력 받기
    for _ in range(N):
        graph.append(list(map(int, input())))
"""

# 빠른 테스트 용
graph = [
    [0, 0, 1, 1, 0],
    [0, 0, 0, 1, 1],
    [1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0]
]
N, M = 4, 5

# 모든 노드(위치)에 대하여 음료수 채우기
result = 0
for i in range(N):
    for j in range(M):
        # 현재 위치에서 DFS 수행
        if dfs(i, j) == True:
            result += 1

print(result)